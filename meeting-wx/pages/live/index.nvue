<template>
	<view>
		<text>hello1</text>
		<text>hello2</text>
		<text>hello3</text>
		<text>hello4</text>
		<text>hello5</text>
		
		<input @input="changeInput($event)" :value="input"/>
		<button @click="sendwsfortest">发送</button>
		
		<view style="padding: 20px; border: 1px solid black; margin: 20px;">
			<view v-for="(item, idx) in chatList" :key="idx" style="display: flex;">
				<view>{{item.avatarName}}:{{item.content}}</view>
			</view>
		</view>
		
	</view>
</template>

<script>
import { generateUUID } from '@/utils/uuid';
import {testRequestLive, getImConfig, getHistoryChatList} from '@/api/live/index.js';
import {b64DecodeUnicode} from '@/utils/common.js';

export default {
	onLoad(params) {
		// console.log("live req, params", params)
		this.roomId = params.id;
		this.userId = this.$store.state.user.userId;
		this.avatarName = this.$store.state.user.nickname;
		getImConfig().then(resp => {
			const {data} = resp;
			this.url = data.wsImServerAddress;
			return data.wsImServerAddress;
		}).then(url => {
			// ws://127.0.0.1:8809/{token}/{userId}/{code}/{param}
			// code固定1001 ，用来登录的时候和netty握手进行校验！
			// param即roomId
			this.connetImServer('ws://' + url + `/1/${this.$store.state.user.userId}/1001/200`);
		});
		
		// 用户进入的时候先查询10条对话记录，显得不那么空
		getHistoryChatList(params.id).then(resp => {
			console.log('chat list history limit 10: ', resp)
			if(resp.code === 200) {
				const {data} = resp;
				const chatHistory = data.map(item => {
					return {"content": item.content, "avatarName": item.nickName};
				});
				this.chatList = chatHistory;
			}
		})
	},
	data() {
		return {
			input: '',
			records: [],
			chatList: [],
		}
	},
	methods: {
		changeInput(e) {
			// console.log(e.target.value)
			this.input = e.target.value;
		},
		sendwsfortest() {
			
			// MessageDTO
			let msgBody = {"roomId": 200,"type":1, "content": this.input,  "avatarName": this.avatarName};
			// ImMsgBody 
			let jsonStr = {"userId": this.userId, "appId": 10001, "bizCode":5555, "data":JSON.stringify(msgBody)};
			let bodyStr = JSON.stringify(jsonStr);
			// ImMsg
			let reviewMsg = {"magic": 19231, "code": 1003, "len": bodyStr.length, "body": bodyStr};
			// console.log(JSON.stringify(reviewMsg));
			this.websocketSend(JSON.stringify(reviewMsg));
			this.input = '';
		},
		
		connetImServer: function (url) {
			let that = this;
			that.websock = new WebSocket(url);
			that.websock.onmessage = that.websocketOnMessage;
			that.websock.onopen = that.websocketOnOpen;
			that.websock.onerror = that.websocketOnError;
			that.websock.onclose = that.websocketClose;
			console.log("连接到ws服务器");
		},
		websocketOnMessage(e) {
			// console.log('收到消息', e)
			let wsData = JSON.parse(e.data);
			if(wsData.code == 1001) {
				// 心跳检测
				this.startHeartBeatJob();
			}
			else if(wsData.code == 1003) {
				//console.log('wsData: ', JSON.parse(b64DecodeUnicode(wsData.body)))
				let respData = JSON.parse(b64DecodeUnicode(wsData.body));
				//console.log('decode', respData)
				if(respData.bizCode==5555) {
					let respMsg = JSON.parse(respData.data);
					let sendMsg = {"content": respMsg.content, "avatarName": respMsg.avatarName};
					console.log('receive msg: ', sendMsg)
					// todo 把消息添加到chatList中，聊天室可以查看历史消息
					this.chatList.push(sendMsg);
					//todo 注意让滑轮滚到底 
					
				}
				this.sendAckCode(respData);
			}
		},
		sendAckCode: function(respData) {
			let jsonStr = {"userId": this.userId, "appId": 10001,"msgId":respData.msgId};
			let bodyStr = JSON.stringify(jsonStr);
			let ackMsgStr = {"magic": 19231, "code": 1005, "len": bodyStr.length, "body": bodyStr};
			this.websocketSend(JSON.stringify(ackMsgStr));
		},
		websocketSend:function (data) {//数据发送
			this.websock.send(data);
		},
		startHeartBeatJob: function() {
			console.log('首次登录成功');
			let that = this;
			//发送一个心跳包给到服务端
			let jsonStr = {"userId": 1, "appId": 10001};
			let bodyStr = JSON.stringify(jsonStr);
			let heartBeatJsonStr = {"magic": 19231, "code": 1004, "len": bodyStr.length, "body": bodyStr};
			setInterval(function () {
				that.websocketSend(JSON.stringify(heartBeatJsonStr));
			}, 3000);
		},
		websocketOnOpen() {
			console.log('初始化建立连接');
		},
		websocketOnError() {
			console.log('出现异常');
		},
		websocketClose(e) {
			console.log('断开连接', e);
		}
	}
	
}
</script>

<style>

</style>